digraph "o2::ITS::TrivialClusterer"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{o2::ITS::TrivialClusterer\n||+ TrivialClusterer()\l+ ~TrivialClusterer()\l+ TrivialClusterer()\l+ operator=()\l+ process()\l+ setGeometry()\l+ setMCTruthContainer()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mGeometry" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{o2::ITSMFT::GeometryTGeo\n||+ GeometryTGeo()\l+ GeometryTGeo()\l+ operator=()\l+ GeometryTGeo()\l+ ~GeometryTGeo()\l+ getNumberOfChips()\l+ Build()\l# ClassDefOverride()\l}",height=0.2,width=0.4,color="black",URL="$d7/d98/classo2_1_1ITSMFT_1_1GeometryTGeo.html"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{o2::detectors::DetMatrix\lCache\n||+ DetMatrixCache()\l+ DetMatrixCache()\l+ ~DetMatrixCache()\l+ DetMatrixCache()\l+ operator=()\l+ getDetID()\l+ getName()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ fillMatrixCache()\l+ setSize()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ ClassDef()\l}",height=0.2,width=0.4,color="black",URL="$df/d06/classo2_1_1detectors_1_1DetMatrixCache.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mDetID" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{o2::detectors::DetID\n|+ TOF\l+ PHS\l+ EMC\l+ HMP\l+ MFT\l+ Last\l|+ DetID()\l+ DetID()\l+ getID()\l+ getMask()\l+ getName()\l+ operator int()\l+ DetID()\l+ getNDetectors()\l+ getName()\l+ getMask()\l}",height=0.2,width=0.4,color="black",URL="$d6/dd5/classo2_1_1detectors_1_1DetID.html",tooltip="Static class with identifiers, bitmasks and names for ALICE detectors. "];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +ACO\n+First\n+FIT\n+MCH\n+TRD\n+TPC\n+ZDC\n+MID\n+ITS\n+CPV\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{static constexpr ID\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +nDetectors" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{int\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mT2G\n+mT2L\n+mL2G" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{o2::detectors::MatrixCache\l\< o2::Transform3D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node8 -> Node7 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Transform3D \>" ,fontname="Helvetica"];
  Node8 [label="{o2::detectors::MatrixCache\< T \>\n||+ MatrixCache()\l+ ~MatrixCache()\l+ MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html",tooltip="MatrixCache is a vector of cached transform matrices (per sensor) for specific Transformation type..."];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mSize" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mT2GRot" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{o2::detectors::MatrixCache\l\< o2::Rotation2D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node8 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Rotation2D \>" ,fontname="Helvetica"];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mClsLabels" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{o2::dataformats::MCTruth\lContainer\< o2::o2::MCCompLabel \>\n||+ MCTruthContainer()\l+ MCTruthContainer()\l+ ~MCTruthContainer()\l+ operator=()\l+ getMCTruthHeader()\l+ getElement()\l+ getIndexedSize()\l+ getNElements()\l+ getLabels()\l+ getLabels()\l+ clear()\l+ addElement()\l+ addElements()\l+ addElements()\l+ addElementRandomAccess()\l+ ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$dc/daa/classo2_1_1dataformats_1_1MCTruthContainer.html"];
  Node11 -> Node10 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::o2::MCCompLabel \>" ,fontname="Helvetica"];
  Node11 [label="{o2::dataformats::MCTruth\lContainer\< T \>\n||+ MCTruthContainer()\l+ ~MCTruthContainer()\l+ MCTruthContainer()\l+ operator=()\l+ getMCTruthHeader()\l+ getElement()\l+ getIndexedSize()\l+ getNElements()\l+ getLabels()\l+ getLabels()\l+ clear()\l+ addElement()\l+ addElements()\l+ addElements()\l+ addElementRandomAccess()\l+ ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$dc/daa/classo2_1_1dataformats_1_1MCTruthContainer.html"];
}
